import streamlit as st
import requests
import pandas as pd
import plotly.express as px
import os

st.title("HR Analytics Bot ‚Äî HR Insight")

# Upload CSV
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ HR", type="csv")
data_path = None
if uploaded_file:
    data_path = f"data/{uploaded_file.name}"
    if not os.path.exists("data"):
        os.makedirs("data")
    with open(data_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    st.success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {data_path}")

# Load sample data for demo
sample_path = "data/sample.csv"
if os.path.exists(sample_path):
    if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö"):
        data_path = sample_path
        st.success("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω")

# Natural Language Query
nl_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ HR –∞–Ω–∞–ª–∏—Ç–∏–∫–µ:")

if st.button("–°–ø—Ä–æ—Å–∏—Ç—å –±–æ—Ç–∞", key="ask"):
    if nl_query and data_path:
        payload = {"text": nl_query, "dataset_path": data_path}
        try:
            response = requests.post("http://localhost:8000/nlquery", json=payload)
            if response.status_code == 200:
                data = response.json()
                st.write("**–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:**")
                st.code(data['sql'], language='sql')
                df = pd.DataFrame(data['rows'])

                if df.empty:
                    st.warning("–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    st.dataframe(df)

                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
                    if 'year' in df.columns and 'attrition_rate' in df.columns:
                        # –¢–µ–∫—É—á–µ—Å—Ç—å –ø–æ –≥–æ–¥–∞–º/–æ—Ç–¥–µ–ª–∞–º
                        fig = px.bar(df, x='year', y='attrition_rate', title="Attrition Rate")
                        st.plotly_chart(fig)

                    elif 'ym' in df.columns:
                        # –¢–µ–∫—É—á–µ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º
                        if 'terminations' in df.columns and 'active' in df.columns:
                            fig = px.line(df, x='ym', y=['terminations', 'active'],
                                        title="Terminations and Active Employees Over Time")
                            st.plotly_chart(fig)
                        elif 'monthly_terminations' in df.columns:
                            fig = px.bar(df, x='ym', y='monthly_terminations',
                                        title="Monthly Terminations")
                            st.plotly_chart(fig)

                    elif 'age_group' in df.columns and 'service_percentage' in df.columns:
                        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º –∏ —Å–µ—Ä–≤–∏—Å—É
                        fig = px.pie(df, values='total_terminations', names='age_group',
                                   title="Terminations by Age Group")
                        st.plotly_chart(fig)

                        fig2 = px.bar(df, x='age_group', y='service_percentage',
                                    title="Service Level Percentage by Age Group")
                        st.plotly_chart(fig2)

                    elif 'recommended_hiring_target' in df.columns:
                        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–π–º—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞
                        dept_name = df.get('department', ['Unknown'])[0]
                        st.write(f"### üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–π–º—É –¥–ª—è –æ—Ç–¥–µ–ª–∞ {dept_name}")
                        for index, row in df.iterrows():
                            col1, col2 = st.columns(2)
                            with col1:
                                st.metric("üóëÔ∏è –í—Å–µ–≥–æ —É–≤–æ–ª—å–Ω–µ–Ω–∏–π", f"{int(row.get('total_terminations', 0))}")
                                st.metric("üë• –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", f"{int(row.get('total_employees', 0))}!")
                            with col2:
                                rate = round(row.get('attrition_rate', 0), 1) if row.get('attrition_rate') else 'N/A'
                                st.metric("üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—á–µ—Å—Ç–∏", f"{rate}%")
                                st.metric("üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–ª–∞–Ω –Ω–∞–π–º–∞", f"{int(row.get('recommended_hiring_target', 0))} —á–µ–ª–æ–≤–µ–∫")

                        # Show only hiring insights for hiring queries
                        if 'recommended_hiring_target' in df.columns:
                            target = int(df['recommended_hiring_target'].iloc[0])
                            st.write("---")
                            st.write(f"üíº **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–µ—Å—è—á–Ω–∞—è —Ü–µ–ª—å –Ω–∞–π–º–∞: {target} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤**")
            else:
                st.error(f"–û—à–∏–±–∫–∞ API: {response.text}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –∏–ª–∏ –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.")
